; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:nucleo_f767zi]
platform = ststm32
board = nucleo_f767zi
; no framework = stm32cube line -- baremetal!

; select linker file generated by CubeMX
board_build.ldscript = STM32F767ZITX_FLASH.ld

; force inclusion of lib/FreeRTOS
lib_deps = STM32F7xx_HAL_Driver, CMSIS, FreeRTOS, BSP
; needed compiler flags to
; correctly build the port assembly files
; and add freertos subfolders to include path
; plus STM32F7 HAL + CMSIS folders
build_flags =
  -mfpu=fpv5-sp-d16
  -mfloat-abi=softfp
  -I lib/STM32F7xx_HAL_Driver/Inc
  -I lib/STM32F7xx_HAL_Driver/Inc/Legacy
  -L lib/STM32F7xx_HAL_Driver/Src
  -I include/core
  -I include/cvc
  -I include
  -I lib/CMSIS/Device/ST/STM32F7xx/Include
  -I lib/CMSIS/Include
  -I lib/FreeRTOS/Source/include
  -I lib/FreeRTOS/Source/CMSIS_RTOS_V2
  -I lib/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1
  -I lib/FreeRTOS/Source/portable/MemMang
  -I lib/BSP/Components/Common
  -I lib/BSP/Components/VNI8200XP
  -I lib/BSP/Components/CLT01_38SQ7
  -I lib/BSP/STM32F7xx_Nucleo_144
  -I lib/BSP/X_NUCLEO_PLC01A1
; link FreeRTOS as objectf files, not as
; archives. otherwise weak ISR functions
; don't get linked properly!
lib_archive = no
; fix for RAM size / initial SP.
; see https://community.platformio.org/t/arm-versus-thumb/23540/
; actually **not** needed because we have selected a fixed linkerfile!!
;board_upload.maximum_ram_size = 131072